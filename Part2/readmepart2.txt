// Nur Suhaira Bte Badrul Hisham
// 5841549
// Assignment 2 ReadMe Part 2

Compilation:
============
1. In NurSuhaira_5841549_A2/Part2:
	javac knapsack.java
	// to compile knapsack.java to generate knapsack.class
	javac task2.java 
	// to compile task2.java to generate task2.class

Before Execution:
=================
1. Make sure task2.java and knapsack.java are compiled with no error.
2. In command prompt:
	java task2
	
During Execution:
=================
1. Enter the size of super increasing knapsack (must be greater or equal to 7) e.g. 8
(ascii values max value is 122 so need 7 bits at least)
2. Program will display number of private key values to input e.g. 2, 5, 9, 21, 45, 103, 215, 450
3. Program will display sum of the private keys entered and to enter a modulus no (can be not prime) > sum e.g. 851
4. Enter a prime multiplier so that gcd with modulus is 1 e.g. 199
(error handling for any non-prime multiplier, gcd != 1 and multiplier < 2) 
5. Computation of the public key will be shown using the private key, multiplier and modulus
6. The program will display 3 menu options: 
	i. Encrypt a set of message
	ii. Decrypt a set of ciphertext
	iii. Quit: Exit program
7. For option 1:
	i. Program will prompt to enter a set of message e.g. Hi
	ii. Decimal will be display with the following binary form and the computation of sum using the public key where ciphertext 		is generated
	iii. Menu wull be displayed once option 1 process is completed
8. For option 2:
	i. Now program prompts to enter a ciphertext (enter -1 to exit) e.g. 589 873 -1 (1 value at a time)
	ii. Program will recover the plaintext now using the ciphertext entered, inverse multiplier and modulus
	iii. The value computed above will be generated by using the super increasing method to derive the binary form
	iv. The binary form will be converted into decimal then to its ascii value
	v. Once done, plaintext will be shown e.g. Hi

Execute Environment
===================
Operating system: Ubuntu
Using terminal.
